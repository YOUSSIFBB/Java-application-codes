/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.vaccinationapp;

import java.io.IOException;
import javax.swing.JOptionPane;

/**
 *
 * @author youssif
 */
public class VaccinationGUI extends javax.swing.JFrame {
    
    private PQInterface myPQueue;

    /**
     * Creates new form VaccinationGUI
     */
    public VaccinationGUI() { 
        initComponents();
        
        myPQueue = new GPPriorityQue(); 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        conditionRadioGroup = new javax.swing.ButtonGroup();
        title = new javax.swing.JLabel();
        pNameLbl = new javax.swing.JLabel();
        pAgeLbl = new javax.swing.JLabel();
        pNameTf = new javax.swing.JTextField();
        pAgeTf = new javax.swing.JTextField();
        conditionLbl = new javax.swing.JLabel();
        rYesRadioButton = new javax.swing.JRadioButton();
        rNoRadioButton = new javax.swing.JRadioButton();
        addBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaDisplay = new javax.swing.JTextArea();
        listDetailsBtn = new javax.swing.JButton();
        numberOfPatientsBtn = new javax.swing.JButton();
        ScheduleBtn = new javax.swing.JButton();
        ExitBtn = new javax.swing.JButton();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        title.setFont(new java.awt.Font("Bell MT", 1, 24)); // NOI18N
        title.setForeground(new java.awt.Color(51, 51, 255));
        title.setText("Welcome to the VaccinationApp");

        pNameLbl.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        pNameLbl.setText("Patient Name :");

        pAgeLbl.setFont(new java.awt.Font("Yu Gothic UI Semibold", 0, 14)); // NOI18N
        pAgeLbl.setText("Patient Age :");

        pAgeTf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pAgeTfActionPerformed(evt);
            }
        });

        conditionLbl.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        conditionLbl.setForeground(new java.awt.Color(255, 51, 51));
        conditionLbl.setText("Do you have a medical condition ?");

        conditionRadioGroup.add(rYesRadioButton);
        rYesRadioButton.setFont(new java.awt.Font("Sitka Text", 1, 12)); // NOI18N
        rYesRadioButton.setText("Yes");

        conditionRadioGroup.add(rNoRadioButton);
        rNoRadioButton.setFont(new java.awt.Font("Sitka Text", 1, 12)); // NOI18N
        rNoRadioButton.setText("No");

        addBtn.setText("Add Person to Vaccination waiting list");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        textAreaDisplay.setColumns(20);
        textAreaDisplay.setRows(5);
        jScrollPane1.setViewportView(textAreaDisplay);

        listDetailsBtn.setText("List details of Patients ");
        listDetailsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listDetailsBtnActionPerformed(evt);
            }
        });

        numberOfPatientsBtn.setText("Number of Patients ");
        numberOfPatientsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberOfPatientsBtnActionPerformed(evt);
            }
        });

        ScheduleBtn.setText("Schedue Group to GP");
        ScheduleBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ScheduleBtnActionPerformed(evt);
            }
        });

        ExitBtn.setText("Exit");
        ExitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(ExitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(pNameLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pAgeLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(44, 44, 44)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(pNameTf)
                                .addComponent(pAgeTf, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(conditionLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(rYesRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(rNoRadioButton, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(listDetailsBtn)
                            .addGap(18, 18, 18)
                            .addComponent(numberOfPatientsBtn)
                            .addGap(18, 18, 18)
                            .addComponent(ScheduleBtn))
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(title)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pNameLbl)
                    .addComponent(pNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pAgeLbl)
                    .addComponent(pAgeTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(conditionLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rYesRadioButton)
                    .addComponent(rNoRadioButton))
                .addGap(18, 18, 18)
                .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(listDetailsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numberOfPatientsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ScheduleBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                .addComponent(ExitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void pAgeTfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pAgeTfActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pAgeTfActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // TODO add your handling code here:
        
        Patient newPatient = new Patient();  
        String pName;
        int pAge; 
        boolean hasMedicalCondition = false;
        
        //I/O exception for blank fields and improper inputs 
        try{
            // I/O Exeptions here for user input
            if( pNameTf.getText().isBlank()){
                throw new IOException( "Text field is empty Please enter you name !");
            }else if(pNameTf.getText().matches("[0-9]+")){
                throw new IOException( "Text field should not contain a number Please enter your name !");
            }else if(pNameTf.getText().matches(".*\\d.*")){   //prevent the user from enetering a name such as james472
                throw new IOException( "Text field should not contain integers please enter your name !");
            }else if(pAgeTf.getText().isBlank()){
                throw new IOException( "Text field is empty Please enter you age !");
            }else if(pAgeTf.getText().matches("[a-z, A-Z]+")){
                throw new IOException( "Text field should not contain a string Please enter an integer value for your age !");
            }else if (!pAgeTf.getText().matches("[0-9]+")){   //if text field does not have any numbers
                throw new IOException( "Text field should not contain a string Please enter an integer value for your age !");
            }else if(pAgeTf.getText().matches("[a-z, A-Z]+")){ //if text field contains strings 
                throw new IOException( "Text field should not contain a string Please enter an integer value for your age !");
            }else if(pAgeTf.getText().matches("[a-zA-Z]\\d+")){ //if text field contains number and strings e.g 123bcd
                throw new IOException( "Text field should not contain a string Please enter an integer value for your age !");
            }
        }catch (IOException e){
            JOptionPane.showMessageDialog(null, e.getMessage());
            //pNameTf.setText("");
            //pAgeTf.setText("");
            //conditionRadioGroup.clearSelection(); //clear the selection for the radio button
            return;
        }
        //I/O exceptions for radio buttons 
        try{
            if(!(rYesRadioButton.isSelected()) && !(rNoRadioButton.isSelected()) ){
                throw new IOException( "Please select either Yes or No to continue");
            }
        }catch(IOException e){
            JOptionPane.showMessageDialog(null, e.getMessage());
            conditionRadioGroup.clearSelection(); //clear the selection for the radio button
            return;
        }
        
        
        //set values for the boolean 
        if(rYesRadioButton.isSelected()){
            hasMedicalCondition = true;
            
        }else if (rNoRadioButton.isSelected()){
             hasMedicalCondition = false;
        }
        //set and get methods for the patient class 
        pName = pNameTf.getText();
        pAge = Integer.parseInt(pAgeTf.getText());
        newPatient.setpName(pName);
        newPatient.setpAge(pAge);
        newPatient.setHasMedicalCondition(hasMedicalCondition);
        
        
        //automated priority values using if statments
        int priority = 0; 
        if(pAge >= 90){
            priority = 10;
        }else if (pAge >=80){
            priority = 9; 
        }else if(pAge >=70){
            priority = 8;
        }else if(pAge >=65 && pAge <= 69){
            priority = 7;
        }else if (pAge >=18 && pAge <= 64 &&hasMedicalCondition == true){
            priority = 6;
        }else if (pAge >= 55 && pAge <= 64){
            priority = 5;
        }else if(pAge >= 45 && pAge <= 54){
            priority = 4;
        }else if(pAge >=30 && pAge <= 44){
            priority = 3;
        }else if (pAge >=18 && pAge <= 29){
            priority = 2;
        }else if (pAge <= 18){
            priority = 1;
        }else{
            priority = 1; //assign the last priority if the other conditions are not met
        }
        
        
        
        //call method enque form the GPP class 
        myPQueue.enque(priority, newPatient);
        //clear the application when a person is added 
        textAreaDisplay.append("\n" + pNameTf.getText() + " has been added to the waiting list \n");
        pNameTf.setText("");
        pAgeTf.setText("");
        conditionRadioGroup.clearSelection(); //clear the selection for the radio button
        
        
    }//GEN-LAST:event_addBtnActionPerformed

    private void listDetailsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listDetailsBtnActionPerformed
        // TODO add your handling code here:
        textAreaDisplay.append("\n" + "Patients details:\n" + myPQueue.printPQ());
    }//GEN-LAST:event_listDetailsBtnActionPerformed

    private void numberOfPatientsBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberOfPatientsBtnActionPerformed
        // TODO add your handling code here:
         textAreaDisplay.append(" \nthere is " + myPQueue.size() + " people waiting to be vacinated \n");
    }//GEN-LAST:event_numberOfPatientsBtnActionPerformed

    private void ScheduleBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ScheduleBtnActionPerformed
        // TODO add your handling code here:
        
        if(!myPQueue.isEmpty()){
            PQElement pq = (PQElement) myPQueue.dequeue();
            Patient currentPaitent = (Patient)pq.getPatient();
            textAreaDisplay.append("\nThe next person in priority Group " +pq.getiKey()+ " is :\n"  + "Name : " + currentPaitent.getpName() + " Age : " + currentPaitent.getpAge() + " Medical condition : " + currentPaitent.computeMed() + " Priority : " + pq.getiKey());
        }else{
            textAreaDisplay.append("\nSorry the queue is empty !");
        }
    }//GEN-LAST:event_ScheduleBtnActionPerformed

    private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitBtnActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_ExitBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VaccinationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VaccinationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VaccinationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VaccinationGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VaccinationGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExitBtn;
    private javax.swing.JButton ScheduleBtn;
    private javax.swing.JButton addBtn;
    private javax.swing.JLabel conditionLbl;
    private javax.swing.ButtonGroup conditionRadioGroup;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listDetailsBtn;
    private javax.swing.JButton numberOfPatientsBtn;
    private javax.swing.JLabel pAgeLbl;
    private javax.swing.JTextField pAgeTf;
    private javax.swing.JLabel pNameLbl;
    private javax.swing.JTextField pNameTf;
    private javax.swing.JRadioButton rNoRadioButton;
    private javax.swing.JRadioButton rYesRadioButton;
    private javax.swing.JTextArea textAreaDisplay;
    private javax.swing.JLabel title;
    // End of variables declaration//GEN-END:variables
}
